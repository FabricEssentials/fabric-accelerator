name: Deploy Fabric Accelerator
on: workflow_dispatch 
env:
  WORKSPACE_NAME: testws
  FABRIC_CAPACITY_NAME: bafabric014e4fwwm2ufole
  WORKSPACE_ADMIN_ID: aca94643-2e36-4cd6-ba96-bfc513b37851
  WORKSPACE_COLLABORATOR_ID: 01e16ca5-e5da-49f3-ac27-a46f1cc68ede
  FABRIC_SQL_DB_NAME: controldb-test
  BRONZE_LH: bronze_lh_test
  SILVER_LH: silver_lh_test
  GOLD_DW: gold_dw_test
  WIDE_WORLD_IMPORTERS_CONNECTION_ID: a0a57e51-5032-4e46-b0f0-493c9d2f51c9

jobs:
  deploy-fabric-accelerator:
    env:
     FABRIC_CAPACITY_ID: null
     FABRIC_WORKSPACE_ID: null
     CONTROLDB_NAME: null
     CONTROLDB_CONNECTION_ID: null
     BRONZE_LH_ID: null
     SILVER_LH_ID: null
     GOLD_DW_ID: null

    runs-on: ubuntu-latest
    steps:

        # Checkout code
        - uses: actions/checkout@v3   

        # Python Version Pre-Requisites
        - name: Fabric CLI Python Pre-Requisites
          uses: actions/setup-python@v4
          with:
            python-version: 3.12
       
       # Install Fabric CLI 
        - name: Install Fabric CLI
          run: pip install ms-fabric-cli

       # Authenticate using Service Principal
        - name: Authenticate to Fabric
          run: |
            fab config set encryption_fallback_enabled true
            fab auth login -u ${{ secrets.ACTION_SPN_CLIENTID }} -p ${{ secrets.ACTION_SPN_SECRET }} --tenant ${{ secrets.TENANT_ID }} 

       # Create Workspace if it does not exist
        - name: Create Workspace if it does not exist
          run: |
            WorkspaceExists=$(fab exists $WORKSPACE_NAME.Workspace | tr -d '[:space:]')
            echo "WorkspaceExists: $WorkspaceExists"
            if [ "$WorkspaceExists" != "*true" ]; then
              fab create $WORKSPACE_NAME.Workspace -P capacityName=$FABRIC_CAPACITY_NAME
              fab acl set $WORKSPACE_NAME.Workspace -I $WORKSPACE_ADMIN_ID -R admin -f
              fab acl set $WORKSPACE_NAME.Workspace -I $WORKSPACE_COLLABORATOR_ID -R contributor -f
            fi 

       # Create Folders if they do not exist
        - name: Create folders if they do not exist
          run: |  
              fab exists $WORKSPACE_NAME.Workspace/elt-framework.Folder | grep -q true || fab create $WORKSPACE_NAME.Workspace/elt-framework.Folder
              fab exists $WORKSPACE_NAME.Workspace/lakehouse.Folder | grep -q true || fab create $WORKSPACE_NAME.Workspace/lakehouse.Folder
              fab exists $WORKSPACE_NAME.Workspace/warehouse.Folder | grep -q true || fab create $WORKSPACE_NAME.Workspace/warehouse.Folder

       # Create Fabric SQL database if it does not exist
        - name: Create FSQL DB if it does not exist
          run: |
              # FSQLExists=$(fab exists $WORKSPACE_NAME.Workspace/elt-framework.Folder/$FABRIC_SQL_DB_NAME.SQLDatabase | tr -d '[:space:]')
              # echo "FSQLExists: $FSQLExists"
              # if [ "$FSQLExists" != "*true" ]; then
              #   fab create $WORKSPACE_NAME.Workspace/elt-framework.Folder/$FABRIC_SQL_DB_NAME.SQLDatabase
              # fi 
              fab exists $WORKSPACE_NAME.Workspace/elt-framework.Folder/$FABRIC_SQL_DB_NAME.SQLDatabase | grep -q true || fab create $WORKSPACE_NAME.Workspace/elt-framework.Folder/$FABRIC_SQL_DB_NAME.SQLDatabase
       # Create Fabric SQL database connection if it does not exist
        - name: Create FSQL DB Connection if it does not exist
          run: |
              FSQLConnExists=$(fab exists .connections/"${WORKSPACE_NAME}-${FABRIC_SQL_DB_NAME}".Connection | tr -d '[:space:]')
              echo "FSQLConnExists: $FSQLConnExists"
              if [ "$FSQLConnExists" != "*true" ]; then
                server=$(fab get $WORKSPACE_NAME.Workspace/$FABRIC_SQL_DB_NAME.SQLDatabase -q properties.serverFqdn| tr -d '\r')
                database=$(fab get $WORKSPACE_NAME.Workspace/$FABRIC_SQL_DB_NAME.SQLDatabase -q properties.databaseName| tr -d '\r') 
                echo "Creating connection for server: $server and database: $database"
                fab create .connections/"${WORKSPACE_NAME}-${FABRIC_SQL_DB_NAME}".Connection -P connectionDetails.creationMethod=SQL,connectionDetails.type=SQL,connectionDetails.parameters.server=$server,connectionDetails.parameters.database=$database,credentialDetails.type=ServicePrincipal,credentialDetails.servicePrincipalClientId=${{ secrets.ACTION_SPN_CLIENTID }},credentialDetails.servicePrincipalSecret=${{ secrets.ACTION_SPN_SECRET }},credentialDetails.tenantid=${{ secrets.TENANT_ID }} 
                connectionID=$(fab get .connections/"${WORKSPACE_NAME}-${FABRIC_SQL_DB_NAME}".Connection -q id| tr -d '\r')

                rolejson=$(jq -n --arg id "$WORKSPACE_ADMIN_ID" '{"principal": {"id": $id, "type": "Group"}, "role": "Owner"}')
                echo "Assigning role to connection: $rolejson"
                fab api -X post "connections/$connectionID/roleAssignments" -i "$rolejson"
                
                rolejson=$(jq -n --arg id "$WORKSPACE_COLLABORATOR_ID" '{"principal": {"id": $id, "type": "Group"}, "role": "Owner"}')
                echo "Assigning role to connection: $rolejson"
                fab api -X post "connections/$connectionID/roleAssignments" -i "$rolejson"
              fi
          # Create Medallion Layers if they do not exist
        - name: Create Medallion Layers if they do not exist
          run: |
              BronzeLHExists=$(fab exists $WORKSPACE_NAME.Workspace/lakehouse.Folder/$BRONZE_LH.Lakehouse | tr -d '[:space:]')
              echo "BronzeLHExists: $BronzeLHExists"
              if [ "$BronzeLHExists" != "*true" ]; then
                fab create $WORKSPACE_NAME.Workspace/lakehouse.Folder/$BRONZE_LH.Lakehouse -P enableSchemas=true
              fi 

              SilverLHExists=$(fab exists $WORKSPACE_NAME.Workspace/$SILVER_LH.Lakehouse | tr -d '[:space:]')
              echo "SilverLHExists: $SilverLHExists"
              if [ "$SilverLHExists" != "*true" ]; then
                fab create $WORKSPACE_NAME.Workspace/lakehouse.Folder/$SILVER_LH.Lakehouse -P enableSchemas=true
              fi 

              GoldDWExists=$(fab exists $WORKSPACE_NAME.Workspace/warehouse.Folder/$GOLD_DW.Warehouse | tr -d '[:space:]')
              echo "GoldDWExists: $GoldDWExists"
              if [ "$GoldDWExists" != "*true" ]; then
                fab create $WORKSPACE_NAME.Workspace/warehouse.Folder/$GOLD_DW.Warehouse
              fi
        #   Import Fabric Accelerator Artifacts
        - name: Import Fabric Accelerator Artifacts
          run: |
              FABRIC_CAPACITY_ID=$(fab get $WORKSPACE_NAME.Workspace -q capacityId | tr -d '\r')
              FABRIC_WORKSPACE_ID=$(fab get $WORKSPACE_NAME.Workspace -q id | tr -d '\r')
              CONTROLDB_NAME=$(fab get $WORKSPACE_NAME.Workspace/$FABRIC_SQL_DB_NAME.SQLDatabase -q properties.databaseName| tr -d '\r')
              CONTROLDB_CONNECTION_ID=$(fab get .connections/"${WORKSPACE_NAME}-${FABRIC_SQL_DB_NAME}".Connection -q id | tr -d '\r')
              BRONZE_LH_ID=$(fab get $WORKSPACE_NAME.Workspace/$BRONZE_LH.Lakehouse -q id | tr -d '\r')
              SILVER_LH_ID=$(fab get $WORKSPACE_NAME.Workspace/$SILVER_LH.Lakehouse -q id | tr -d '\r')
              GOLD_DW_ID=$(fab get $WORKSPACE_NAME.Workspace/$GOLD_DW.Warehouse -q id | tr -d '\r')

              grep --null -rl "controlDB-78d6902e-70ea-4fb0-b51e-af3f2aaee3b7" ${GITHUB_WORKSPACE}/workspace | xargs -0 sed -i "s/controlDB-78d6902e-70ea-4fb0-b51e-af3f2aaee3b7/$CONTROLDB_NAME/g"
